<?xml version="1.0" encoding="UTF-8"?>
<!-- 
 build.xml
 This file is part of Mox

 Copyright (C) 2009 - Vincent Petithory

 Mox is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 Mox is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Mox; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, 
 Boston, MA  02110-1301  USA
 -->
<project name="Mox" default="all" basedir=".">

	<!-- Project properties -->
	
	<!-- The project name (canonical form) -->
	<property name="project.name" value="as3-mox" />
	<!-- The project major version -->
	<property name="project.version.major" value="0" />
	<!-- The project minor version -->
	<property name="project.version.minor" value="18" />
	
	<!-- Compile time properties -->
	<property name="debug" value="true" />
	<property name="player" value="10" />
	<property name="air" value="true" />
	
	<!-- Properties -->

	<property file="${basedir}/build.properties" />

	<taskdef 
		file="${project.build.system.tasks}" 
		classpath="${project.build.system.jar}" 
	/>
	
	<!-- metadata -->
	<property name="project.metadata.title" value="'@your-project-title@'" />
	<property name="project.metadata.description" value="'@your-project-description@'" />
	<property name="project.metadata.publisher" value="'@your-project-publisher@'" />
	<property name="project.metadata.creator" value="'@your-project-creator@'" />
	<property name="project.metadata.language" value="EN" />
	
	<!-- Standard targets -->
	
	<target name="distclean" description="cleans the distribution files">
		<antcall target="samplesclean" />
		<antcall target="checkclean" />
	</target>
	
	<target name="dist" description="makes the distribution file">
		<fail message="Non-sources files are not built. run 'ant all' first. Check you did not delete provided documentation files too (run ant html to rebuild them).">
			<condition>
				<not>
					<and>
						<available file="${project.lib}" />
						<available file="${project.man}" />
					</and>
				</not>
			</condition>
		</fail>
		<antcall target="distclean" />
		<tar destfile="${basedir}/${project.name}-${project.version}.tar" >
			<tarfileset 
				dir="." 
				prefix="${project.name}-${project.version}" 
				excludes=".gitignore,.git/**,*.tar.gz"
			/>
		</tar>
		<gzip destfile="${basedir}/${project.name}-${project.version}.tar.gz" src="${basedir}/${project.name}-${project.version}.tar"/>
		<delete file="${basedir}/${project.name}-${project.version}.tar" />
	</target>
    
    <target name="all">
    	<buildnumber file="${project.build.file}" />
    	<mkdir dir="${project.deps}" />
    	<mkdir dir="${project.lib}" />
		<compc air="${air}" failonerror="true">
		    <arg value="-define=CFG::debug,${debug}" />
		    <arg value="-define=CFG::air,${air}" />
		    <arg value="-define=CFG::player,${player}" />
		    <arg value="-define=CFG::vector,&quot;CFG::air || CFG::player > 9&quot;" />
		    <arg value="-define=CFG::array,&quot;!CFG::vector&quot;" />
		    <arg value="-title ${project.metadata.title}" />
			<arg value="-description ${project.metadata.description}" />
			<arg value="-publisher ${project.metadata.publisher}" />
			<arg value="-creator ${project.metadata.creator}" />
			<arg value="-language ${project.metadata.language}" />
			<arg value="-debug=${debug}" />
			<arg value="-target-player=${player}" />
			<arg value="-sp ${project.src}" />
			<arg value="-library-path+=${project.deps}" />
			<arg value="-is ${project.input}" />
			<arg value="-o ${project.output}" />
		</compc>
    </target>
    
    <target name="html">
        <mkdir dir="${project.man}" />
    	<asdoc air="${air}" failonerror="true">
		    <arg value="-define=CFG::debug,${debug}" />
		    <arg value="-define=CFG::air,${air}" />
		    <arg value="-define=CFG::player,${player}" />
		    <arg value="-define=CFG::vector,&quot;CFG::air || CFG::player > 9&quot;" />
		    <arg value="-define=CFG::array,&quot;!CFG::vector&quot;" />
		    
		    <arg value="-title ${project.metadata.title} " />
			<arg value="-description ${project.metadata.description}" />
			<arg value="-publisher ${project.metadata.publisher}" />
			<arg value="-creator ${project.metadata.creator}" />
			<arg value="-language ${project.metadata.language}" />
			
		    <arg value="-target-player=${player}" />
			<arg value="-sp ${project.src}" />
			<arg value="-library-path+=${project.deps}" />
			<arg value="-doc-sources ${project.input}" />
			<arg value="-o ${project.man.api}" />
		</asdoc>
    </target>
    
    <target name="clean">
    	<delete includeemptydirs="true">
			<fileset dir="${project.lib}" includes="**/*"/>
			<fileset dir="${project.man}" includes="**/*"/>
			<fileset dir="${project.check.bin}" includes="*.cache"/>
			<fileset dir="${project.check.bin}" includes="*.swf"/>
			<fileset dir="${project.check.bin}" includes="*.xml" excludes="*-tmp.xml"/>
		</delete>
    </target>

	<target name="check" description="runs unit tests">
        <mxmlc air="true" failonerror="true">
            <arg value="-define=CFG::debug,${debug}" />
		    <arg value="-define=CFG::air,true" />
		    <arg value="-define=CFG::player,${player}" />
		    <arg value="-define=CFG::vector,&quot;CFG::air || CFG::player > 9&quot;" />
		    <arg value="-define=CFG::array,&quot;!CFG::vector&quot;" />
            <arg value="-debug=${debug}" />
            <arg value="-incremental" />
            <arg value="-target-player=${player}" />
            <arg value="-sp ${project.check.src}" />
            <arg value="-sp ${project.src}" />
			<arg value="-library-path+=${project.deps}" />
			<arg value="-file-specs ${project.check.input}" />
			<arg value="-o ${project.check.output}" />
        </mxmlc>
        <copy file="${project.check.appdesc.tmp}" tofile="${project.check.appdesc}">
        	<filterchain>
        		<expandproperties />
        	</filterchain>
        </copy>
        <adl xml="${project.check.appdesc}" dir="${project.check.bin}" />
    </target>
	
	<!-- Additional standard targets -->
	
	<target name="sample" unless="${sample}" description="Runs a sample">
        <mxmlc air="true" failonerror="true">
            <arg value="-define=CFG::debug,${debug}" />
		    <arg value="-define=CFG::air,true" />
		    <arg value="-define=CFG::player,${player}" />
		    <arg value="-define=CFG::vector,&quot;CFG::air || CFG::player > 9&quot;" />
		    <arg value="-define=CFG::array,&quot;!CFG::vector&quot;" />
            <arg value="-debug=${debug}" />
            <arg value="-target-player=${player}" />
            <arg value="-sp ${project.src}" />
			<arg value="-library-path+=${project.deps}" />
			<arg value="-file-specs ${project.home}/samples/${sample}.as" />
			<arg value="-o ${project.home}/samples/${sample}.swf" />
        </mxmlc>
        <copy 
            file="${project.home}/samples/application-sample-tmp.xml" 
            tofile="${project.home}/samples/application-${sample}.xml"
        >
        	<filterchain>
        		<expandproperties />
        	</filterchain>
        </copy>
        <adl xml="${project.home}/samples/application-${sample}.xml" dir="${project.home}/samples" />
	</target>
	
	<!-- private utility targets -->
	
	<target name="checkclean" description="Cleans all samples">
    	<delete includeemptydirs="true">
			<fileset dir="${project.check.bin}" includes="*.cache"/>
			<fileset dir="${project.check.bin}" includes="*.swf"/>
			<fileset dir="${project.check.bin}" includes="*.xml" excludes="*-tmp.xml"/>
		</delete>
	</target>
	
	<target name="samplesclean" description="Cleans all samples">
    	<delete includeemptydirs="true">
			<fileset dir="${project.home}/samples" includes="*.swf" />
			<fileset dir="${project.home}/samples" includes="*.xml" excludes="*-tmp.xml"/>
			<fileset dir="${project.home}/samples" includes="*.cache" />
		</delete>
	</target>
	
</project>
